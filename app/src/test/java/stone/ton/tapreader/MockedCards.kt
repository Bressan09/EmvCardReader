package stone.ton.tapreader

import stone.ton.tapreader.interfaces.ICardConnection
import stone.ton.tapreader.models.apdu.APDUCommand
import stone.ton.tapreader.models.apdu.APDUResponse
import stone.ton.tapreader.utils.General.Companion.decodeHex
import stone.ton.tapreader.utils.General.Companion.toHex

object MockedCards {

    fun getMockCardOne(): MockCard {
        val fciResponse = APDUResponse(
            "6F36840AA0000000041010D07613A528500A4D6173746572636172648701015F2D047074656EBF0C0F9F4D020B0A9F6E07007600003030009000".decodeHex(),
            100000
        )
        return MockCard(fciResponse, cardOneApdus)
    }

    fun getMockCardBTT(): MockCard {
        val fciResponse = APDUResponse(
            "6f 23 84 0e 32 50 41 59 2e 53 59 53 2e 44 44 46 30 31 a5 11 bf 0c 0e 61 0c 4f 07 a0 00 00 00 04 10 10 87 01 01 90 00".decodeHex(),
            100000
        )
        return MockCard(fciResponse, cardBTTApdus)
    }

    private val cardOneApdus = mapOf(
        "00A404000E325041592E5359532E444446303100" to "6F32840E325041592E5359532E4444463031A520BF0C1D611B4F0AA0000000041010D07613870101500A4D6173746572636172649000",
        "00A404000AA0000000041010D0761300" to "6F36840AA0000000041010D07613A528500A4D6173746572636172648701015F2D047074656EBF0C0F9F4D020B0A9F6E07007600003030009000",
        "80A8000002830000" to "770E82021981940818010302200102009000",
        "80EA0000047654321000" to "800ACBE2AEA20003000600019000",
        "00B2011C00" to "702F5F25032112075F24035012315A0855049399999909125F34010057135504939999990912D10122060000021900000F9000",
        "00B2021C00" to "70779F420209869F0702FF009F080200028C279F02069F03069F1A0295055F2A029A039C019F37049F35019F45029F4C089F34039F21039F7C148D0C910A8A0295059F37049F4C088E0E000000000000000042031E031F039F0D05B4508400049F0E0500000000009F0F05B4708480045F280200769F4A01829000",
        "00B2031C00" to "7081B49F4681B056AAE6B400E89FABDDB49DEAD0F41830CA3771C93A2322133D5E8CF694E39D03FF65C67A7C6667AE9BBB70970778E6C9ACE5B1C96497503CAEBEB20FD9F2ED5B44E744203FDFD0F9FA722E084FBAEF1ECAAB129945B66E4518B7E21DDF5BEC85313F3AD15301FF5F48EB516583E9C92D2D5EF13EB7073AEDF95F801204000FD4A63F741F64743255C82F46092B1973190E0992BB87550481529A5FA789030FEBCA949530473687D56EB5CDE44A7E29A99000",
        "00B2012400" to "700B8F01069F3201039F4701039000",
        "00B2022400" to "7081FB9081F8BD0C1CBE57F5F88E756D412AFD1CF94555CCE7A76088342177EB0AE453410E9BB06434E731BB966F1338780AA82C37A20FBF0301A5CFE0CC16A6519D53E6E30F7BB796C927C6E8F570DE496956F35FD3C80E8CFB6743C66430A08BD344A4CBDA6BA6FC92CD2BE7F5F8A27FACE61F2F0460A1731B357B68C1D6D3BB7DAC10ECD954B4663CDF65F0737144FAFE3A2B009C124B8C9FCA8876CF91EC1C4FEC0ED93207558904888801B33953C760679F127DA635E10B92C93A5375A834E3BF35C84947CEC7B835D27ED6F3925D15F4390DAB49066BDEE8F986C94008FF9971FC5316BDB54B9E25428AF37F5AB0EEBC7F0C76A83DCE7C65AC414E9000",
        "80AE9000420000012345000000000000000076000004800E098622062400765432102100000000000000000000420300072716000000000000000000000000000000000000000000" to "7781A29F2701809F360200549F4B8180677718CE25ED8E5D9E26627A385C03E42872C9621D56BAD7D8263AAC98F5BE733175D575FA2B637958B92051C92FE1DBAF869E6C79087DD698FD793781398A0C47A33E6162ABB7B9B4DD5348D7EF0C3AAA6DA3A3A9FD96584CEE1DEE9FE6941585AC5CC2FC268BCA0EA1F4F2D1EAA386D9FA5F822460F9395FF3BED298AAD2C29F10120110A04001220000000000000000000000FF9000",
    )


    private val cardBTTApdus = mapOf(
        "00 a4 04 00 0e 32 50 41 59 2e 53 59 53 2e 44 44 46 30 31 00" to "6f 23 84 0e 32 50 41 59 2e 53 59 53 2e 44 44 46 30 31 a5 11 bf 0c 0e 61 0c 4f 07 a0 00 00 00 04 10 10 87 01 01 90 00",
        "00 a4 04 00 07 a0 00 00 00 04 10 10 00" to "6f 27 84 07 a0 00 00 00 04 10 10 a5 1c 50 0a 4d 43 44 30 33 20 76 31 20 30 bf 0c 0d 5f 50 0a 69 6d 73 2e 75 6c 2e 63 6f 6d 90 00",
        "80 a8 00 00 02 83 00 00" to "77 12 82 02 19 80 94 0c 10 01 01 01 18 01 01 00 20 01 02 00 90 00",
        "00 b2 01 14 00" to "70 81 9c 57 11 54 13 33 00 89 70 00 34 d4 91 22 06 01 23 45 67 89 5a 08 54 13 33 00 89 70 00 34 5f 24 03 49 12 31 5f 25 03 18 05 01 5f 28 02 00 56 5f 34 01 01 8c 21 9f 02 06 9f 03 06 9f 1a 02 95 05 5f 2a 02 9a 03 9c 01 9f 37 04 9f 35 01 9f 45 02 9f 4c 08 9f 34 03 8d 0c 91 0a 8a 02 95 05 9f 37 04 9f 4c 08 8e 0c 00 00 00 00 00 00 00 00 5e 03 1f 03 9f 07 02 ff c0 9f 08 02 00 02 9f 0d 05 00 00 00 00 00 9f 0e 05 00 00 00 00 00 9f 0f 05 00 00 00 00 00 9f 42 02 09 78 9f 4a 01 82 90 00",
        "00 b2 01 1c 00" to "70 81 ba 8f 01 f1 9f 32 01 03 90 81 b0 52 d6 d1 f9 3a 0d 63 a6 8c 66 28 99 26 67 47 5f ea fb 3b d1 bc 70 a3 c2 5b df f0 63 0b be 24 ef f1 d8 90 f7 47 ff dd c5 22 70 64 7f a4 dc 10 20 68 73 50 03 00 6f a4 f0 25 79 0a d1 10 91 be f8 02 70 0d ba 09 a5 6f b3 2d 4c 01 b3 55 39 37 77 fc 45 44 d6 a6 bc ee 1c ac cf 1f 46 c3 d7 b3 b2 e5 60 b5 21 d6 de 24 69 86 5f 54 e0 a1 90 b4 e9 1a 52 c0 3d bd 31 68 ce ee 19 d6 43 2e ec f4 f7 84 12 9e d9 97 91 1e cb 75 1f 9e 39 5c d4 e0 f2 c9 8c 1d 5a 04 ed ed 14 a4 86 3c 9d 04 90 90 d4 46 e5 78 bf 03 27 46 10 2d 1c 04 ba 3e e6 9c dd 90 00",
        "00 b2 01 24 00" to "70 21 9f 47 01 03 9f 48 1a 00 00 00 00 00 00 00 06 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 90 00",
        "00 b2 02 24 00" to "70 73 9f 46 70 79 be 43 57 4b 7d cd 91 1a e8 e8 28 14 a8 dc 23 57 3d 24 6c 9a ec 14 91 bc 7e fb 4b b7 3b 67 f7 f8 3e 8a dd ce e7 51 ed 3f 62 c9 11 01 28 45 3d e5 03 b2 41 06 0b 82 1b ac e4 c8 48 6a 55 3a 91 7f f4 a9 ce 12 c4 b1 b4 a8 ba 5d f0 0b 13 0b 5b cc 16 e8 c2 85 75 1d 9b 73 9d b6 7a 3a f3 fb c8 cc 6c 6b eb 1b fd fa f2 2a 4e af 46 25 31 c8 b5 90 00",
        "80 ae 90 00 2b 00 00 00 00 01 00 00 00 00 00 00 00 00 76 00 80 00 80 01 09 86 22 07 27 00 76 54 32 10 21 00 00 00 00 00 00 00 00 00 00 1f 03 02 00" to "77 81 81 9f 27 01 80 9f 36 02 00 02 9f 4b 60 84 d2 19 5a 9e 81 d0 5f 8f b9 07 ce 0b 6f 6a e6 ee cd 01 6d 46 e1 1f 0e ba f7 4c 89 fb 97 69 94 77 d8 5d 2c 0f 20 e6 2b 21 e7 6b 78 d7 cf 9e e6 ad 94 f7 7b 3b 13 2d f8 c9 c7 66 65 4b 41 e4 98 43 36 82 73 17 e9 c8 69 5b de 91 84 36 c5 2f 3c 74 c9 c1 d2 d3 e2 8f 27 2d e2 fb 19 3c 28 4d 35 9f 10 12 01 10 a0 00 0f 04 00 00 00 00 00 00 00 00 00 00 00 ff 90 00",
       //80 AE 90 00 2B 00 00 00 00 01 00 00 00 00 00 00 00 00 76 00 80 00 80 01 09 86 22 07 27 00 76 54 32 10 21 00 00 00 00 00 00 00 00 00 00 1F 03 02 00
       // validar 9f34 03 02 00 -> 03 00 00
    )

    class MockCard(val fciResponse: APDUResponse, apdus_: Map<String, String>) :
        ICardConnection {
        var apdus: HashMap<String, String> = HashMap()

        init {
            for(apdu in apdus_){
                apdus[apdu.key.replace(" ","").uppercase()] = apdu.value.replace(" ", "").uppercase()
           }
       }

        override fun connect() {
            return
        }

        override fun transceive(command: APDUCommand): APDUResponse {
            return transceive(command.getAsBytes())
        }

        override fun transceive(bytes: ByteArray): APDUResponse {
            val timeTaken = 100000
            println("received: ${bytes.toHex()}")
            val apduData =
                apdus.getOrDefault(bytes.toHex(), "")
            return APDUResponse(apduData.decodeHex(), timeTaken.toLong())
        }

    }
}